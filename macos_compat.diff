diff --git a/meson.build b/meson.build
index 113eb1a..8f8bce7 100644
--- a/meson.build
+++ b/meson.build
@@ -27,6 +27,7 @@ datadir_gtkwave = get_option('datadir') / 'gtkwave3'
 glib_req = '>=2.64.0'
 glib_req_macro = 'GLIB_VERSION_2_64'
 gtk_req = '>=3.24.0'
+gtk_mac_integration_req = '>=3.0.0'
 zlib_req = '>=1.2.0'
 bzip2_req = '>=1.0.0'
 tcl_req = '>=8.6.0'
@@ -42,6 +43,11 @@ gtk_unix_print_dep = dependency(
     version: gtk_req,
     required: false,
 )
+gtk_mac_integration_dep = dependency(
+    'gtk-mac-integration-gtk3',
+    version: gtk_mac_integration_req,
+    required: host_machine.system() == 'darwin',
+)
 zlib_dep = dependency('zlib', version: zlib_req)
 tcl_dep = dependency('tcl', version: tcl_req, required: get_option('tcl'))
 tk_dep = dependency('tk', version: tk_req, required: get_option('tcl'))
@@ -80,6 +86,16 @@ add_project_arguments(
     language: 'c',
 )
 
+if host_machine.system() == 'darwin'
+    add_project_arguments(
+        '-xobjective-c',
+        '-DWAVE_COCOA_GTK',
+        '-Wl,-lobjc',
+        '-Wl,-framework Cocoa',
+        '-Wl,-framework ApplicationServices',
+        language: 'c')
+endif
+
 # External programs
 
 gperf = find_program('gperf')
diff --git a/src/cocoa/cocoa_misc.c b/src/cocoa/cocoa_misc.c
index fd6c165..9874179 100644
--- a/src/cocoa/cocoa_misc.c
+++ b/src/cocoa/cocoa_misc.c
@@ -204,8 +204,8 @@ return(rc);
 /* simplereq.c / entry.c */
 /*************************/
 
-static int gtk_simplereqbox_req_bridge_2(char *title, char *default_text, char *oktext, char *canceltext, 
-	int is_alert, int is_entry, char *default_in_text_entry, char **out_text_entry, int width)
+static int gtk_simplereqbox_req_bridge_2(const char *title, const char *default_text, const char *oktext, const char *canceltext, 
+	int is_alert, int is_entry, const char *default_in_text_entry, char **out_text_entry, int width)
 {
 NSAlert *alert = [[[NSAlert alloc] init] autorelease];
 int rc = 0;
@@ -272,13 +272,13 @@ return(rc);
 }
 
 
-int gtk_simplereqbox_req_bridge(char *title, char *default_text, char *oktext, char *canceltext, int is_alert)
+int gtk_simplereqbox_req_bridge(const char *title, const char *default_text, const char *oktext, const char *canceltext, int is_alert)
 {
 return(gtk_simplereqbox_req_bridge_2(title, default_text, oktext, canceltext, is_alert, 0, NULL, 0, 0));
 }
 
 
-int entrybox_req_bridge(char *title, int width, char *dflt_text, char *comment, int maxch, char **out_text_entry)
+int entrybox_req_bridge(const char *title, int width, const char *dflt_text, const char *comment, int maxch, char **out_text_entry)
 {
 int rc = gtk_simplereqbox_req_bridge_2(title, comment, "OK", "Cancel", 
 	0, 1, dflt_text, out_text_entry, width);
diff --git a/src/cocoa/cocoa_misc.h b/src/cocoa/cocoa_misc.h
index 44cb5ff..cf0344b 100644
--- a/src/cocoa/cocoa_misc.h
+++ b/src/cocoa/cocoa_misc.h
@@ -17,7 +17,7 @@
 
 void gtk_open_external_file(const char *fpath);
 char *gtk_file_req_bridge(const char *title, const char *fpath, const char *pattn, int is_writemode);
-int gtk_simplereqbox_req_bridge(char *title, char *default_text, char *oktext, char *canceltext, int is_alert);
-int entrybox_req_bridge(char *title, int width, char *dflt_text, char *comment, int maxch, char **out_text_entry);
+int gtk_simplereqbox_req_bridge(const char *title, const char *default_text, const char *oktext, const char *canceltext, int is_alert);
+int entrybox_req_bridge(const char *title, int width, const char *dflt_text, const char *comment, int maxch, char **out_text_entry);
 
 #endif
diff --git a/src/main.c b/src/main.c
index 35ab4ac..fce33bb 100644
--- a/src/main.c
+++ b/src/main.c
@@ -711,9 +711,6 @@ int main_2(int opt_vcd, int argc, char *argv[])
 
     int splash_disable_rc_override = 0;
     int mainwindow_already_built = 0;
-#ifdef MAC_INTEGRATION
-    GdkPixbuf *dock_pb;
-#endif
 
     struct rc_override *rc_override_head = NULL, *rc_override_curr = NULL;
 
@@ -2043,7 +2040,7 @@ savefile_bail:
                 gtkosx_application_set_menu_bar(theApp, GTK_MENU_SHELL(menubar));
                 gtkosx_application_set_use_quartz_accelerators(theApp, TRUE);
                 gtkosx_application_ready(theApp);
-                gtkosx_application_set_dock_icon_pixbuf(theApp, dock_pb);
+                gtkosx_application_set_dock_icon_pixbuf(theApp, NULL);
                 if (GLOBALS->loaded_file_type == MISSING_FILE) {
                     gtkosx_application_attention_request(theApp, INFO_REQUEST);
                 }
diff --git a/src/meson.build b/src/meson.build
index fb52087..cabfc3a 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -102,12 +102,14 @@ gtkwave_sources = [
     'wave_view.c',
     'wavewindow.c',
     'zoombuttons.c',
+    'cocoa/cocoa_misc.c'
 ]
 
 gtkwave_dependencies = [
     glib_dep,
     gtk_dep,
     gtk_unix_print_dep,
+    gtk_mac_integration_dep,
     m_dep,
     libfst_dep,
     liblxt_dep,
diff --git a/src/wave_view.c b/src/wave_view.c
index 7bd9f34..afe6bdf 100644
--- a/src/gw-wave_view.c
+++ b/src/gw-wave_view.c
@@ -685,6 +685,7 @@ static gboolean gw_wave_view_draw(GtkWidget *widget, cairo_t *cr)
 static void gw_wave_view_size_allocate(GtkWidget *widget, GtkAllocation *allocation)
 {
     GwWaveView *self = GW_WAVE_VIEW(widget);
+    int scale;
 
     GTK_WIDGET_CLASS(gw_wave_view_parent_class)->size_allocate(widget, allocation);
 
@@ -698,12 +699,14 @@ static void gw_wave_view_size_allocate(GtkWidget *widget, GtkAllocation *allocat
 
     g_clear_pointer(&self->traces_surface, cairo_surface_destroy);
 
+    scale = gtk_widget_get_scale_factor(widget);
+
     self->traces_surface =
         gdk_window_create_similar_image_surface(gtk_widget_get_window(widget),
                                                 CAIRO_FORMAT_ARGB32,
-                                                allocation->width,
-                                                allocation->height,
-                                                gtk_widget_get_scale_factor(widget));
+                                                allocation->width * scale,
+                                                allocation->height * scale,
+                                                scale);
 
     self->dirty = TRUE;
 }
